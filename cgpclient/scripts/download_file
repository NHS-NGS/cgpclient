#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path

import yaml  # type: ignore

from cgpclient.client import CGPClient
from cgpclient.fhir import ClientConfig  # type: ignore
from cgpclient.utils import setup_logger


def parse_args(args: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=("Fetch a file associated with an NGIS referral ID")
    )
    parser.add_argument(
        "-f",
        "--file_id",
        type=str,
        help="Identifier for the file (filename) associated with a DocumentReference",
    )
    parser.add_argument(
        "-d",
        "--document_reference",
        type=str,
        help="DocumentReference ID",
    )
    parser.add_argument(
        "-y",
        "--force_overwrite",
        action="store_true",
        help="Overwrite existing file without prompting",
    )
    parser.add_argument(
        "-out",
        "--output",
        type=Path,
        help="Local path for the downloaded file",
    )
    parser.add_argument(
        "-r",
        "--referral_id",
        type=str,
        help="NGIS referral ID, e.g r30000000001",
    )
    parser.add_argument(
        "-p",
        "--participant_id",
        type=str,
        help="NGIS participant ID",
    )
    parser.add_argument(
        "-o",
        "--ods_code",
        type=str,
        help="ODS code for your organisation",
    )
    parser.add_argument(
        "-host",
        "--api_host",
        type=str,
        help="API host base URL (default api.service.nhs.uk)",
        default="api.service.nhs.uk",
    )
    parser.add_argument(
        "-api",
        "--api_name",
        type=str,
        help="API name (e.g. genomic-data-access)",
    )
    parser.add_argument(
        "-over",
        "--override_api_base_url",
        type=bool,
        help="Override the default API base URLs in all relevant URLs",
        default=False,
    )
    parser.add_argument(
        "-k",
        "--api_key",
        type=str,
        help=(
            "NHS APIM API key from application registered in "
            "https://digital.nhs.uk/developer"
        ),
    )
    parser.add_argument(
        "-pem",
        "--private_key_pem_file",
        type=Path,
        help=(
            "Path to private key PEM file, the corresponding public key "
            "must have been shared with NHS APIM"
        ),
    )
    parser.add_argument(
        "-kid",
        "--apim_kid",
        type=str,
        help=(
            "NHS APIM Keypair Identifier (KID), must have been shared "
            "with NHS APIM (default 'test-1')"
        ),
        default="test-1",
    )
    parser.add_argument(
        "-pp",
        "--pretty_print",
        action="store_true",
        help="Pretty print JSON output",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Print verbose output",
    )
    parser.add_argument(
        "-vv",
        "--debug",
        action="store_true",
        help="Print debugging output",
    )
    parser.add_argument(
        "-cfg",
        "--config_file",
        type=Path,
        help="Configuration YAML file (default ~/.cgpclient/config.yaml)",
        default=Path.home() / ".cgpclient/config.yaml",
    )
    parser.add_argument(
        "-w",
        "--workspace_id",
        type=str,
        help="FHIR server workspace ID",
    )

    parsed: argparse.Namespace = parser.parse_args(args)

    if parsed.config_file and parsed.config_file.is_file():
        # if we're passed a config file use it as default values
        # and then reparse
        config: dict = yaml.safe_load(parsed.config_file.read_text(encoding="utf-8"))
        parser.set_defaults(**config)
        parsed = parser.parse_args(args)

    return parsed


def main(cmdline_args: list[str]) -> None:
    args: argparse.Namespace = parse_args(cmdline_args)

    setup_logger(verbose=args.verbose, debug=args.debug)

    config: ClientConfig = ClientConfig(
        referral_id=args.referral_id,
        participant_id=args.participant_id,
        file_id=args.file_id,
        ods_code=args.ods_code,
        workspace_id=args.workspace_id,
    )

    client: CGPClient = CGPClient(
        api_host=args.api_host,
        api_name=args.api_name,
        api_key=args.api_key,
        private_key_pem=args.private_key_pem_file,
        apim_kid=args.apim_kid,
        override_api_base_url=args.override_api_base_url,
        config=config,
    )

    client.download_file(
        document_reference_id=args.document_reference,
        output=args.output,
        force_overwrite=args.force_overwrite,
    )


if __name__ == "__main__":
    main(sys.argv[1:])
