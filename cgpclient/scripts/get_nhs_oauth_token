#!/usr/bin/env python3

from __future__ import annotations

import argparse
import logging
import sys
from pathlib import Path

import yaml  # type: ignore

from cgpclient.client import CGPClient


def parse_args(args: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Fetch an OAuth token from the NHS OAuth server"
    )
    parser.add_argument(
        "-host",
        "--api_host",
        type=str,
        help="API host base URL (default api.service.nhs.uk)",
        default="api.service.nhs.uk",
    )
    parser.add_argument(
        "-api",
        "--api_name",
        type=str,
        help="API name (e.g. genomic-data-access)",
    )
    parser.add_argument(
        "-k",
        "--api_key",
        type=str,
        help=(
            "NHS APIM API key from application registered in "
            "https://digital.nhs.uk/developer"
        ),
    )
    parser.add_argument(
        "-pem",
        "--private_key_pem_file",
        type=Path,
        help=(
            "Path to private key PEM file, the corresponding public key "
            "must have been shared with NHS APIM"
        ),
    )
    parser.add_argument(
        "-kid",
        "--apim_kid",
        type=str,
        help=(
            "NHS APIM Keypair Identifier (KID), must have been shared "
            "with NHS APIM (default 'test-1')"
        ),
        default="test-1",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Print verbose output",
    )
    parser.add_argument(
        "-vv",
        "--debug",
        action="store_true",
        help="Print debugging output",
    )
    parser.add_argument(
        "-cfg",
        "--config_file",
        type=Path,
        help="Configuration YAML file (default ~/.cgpclient/config.yaml)",
        default=Path.home() / ".cgpclient/config.yaml",
    )

    parsed: argparse.Namespace = parser.parse_args(args)

    if parsed.config_file and parsed.config_file.is_file():
        # if we're passed a config file use it as default values and
        # then reparse
        config: dict = yaml.safe_load(parsed.config_file.read_text(encoding="utf-8"))
        parser.set_defaults(**config)
        parsed = parser.parse_args(args)

    return parsed


def main(cmdline_args: list[str]) -> str | None:
    args: argparse.Namespace = parse_args(cmdline_args)

    if args.debug:
        logging.getLogger(__name__).setLevel(logging.DEBUG)
    elif args.verbose:
        logging.getLogger(__name__).setLevel(logging.INFO)

    client: CGPClient = CGPClient(
        api_host=args.api_host,
        api_name=args.api_name,
        api_key=args.api_key,
        private_key_pem=args.private_key_pem_file,
        apim_kid=args.apim_kid,
    )

    return client.get_access_token()


if __name__ == "__main__":
    print(main(sys.argv[1:]), end=None)
