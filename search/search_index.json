{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CGP Client Library","text":""},{"location":"#python-client-for-the-clinical-genomics-platform-apis","title":"Python client for the Clinical Genomics Platform APIs","text":"<p>The CGP Client is a Python library designed to simplify and accelerate your interactions with the Clinical Genomics Platform (CGP) APIs on the NHS API Platform.</p> <p>Get Started with the CGP Client </p> <p>Discover the Uses </p> <p>Start Contributing </p> <p>Alpha Stage</p> <p>Please be aware that this package and the underlying CGP APIs are currently in the Alpha phase of development. This means:</p> <ul> <li>APIs are subject to potential breaking changes.</li> <li>No Service Level Agreements (SLAs) are offered at this stage.</li> </ul> <p>We plan to transition to a private Beta phase in the near future, where we will begin testing with realistic data, moving beyond the current test data.</p>"},{"location":"contributing/","title":"Want to contribute?","text":"<p>We\u2019d love your help in improving this client for NHS GMS partners! Whether it\u2019s reporting issues, suggesting new features, or contributing code, here\u2019s how you can get involved:</p>"},{"location":"contributing/#report-issues-request-features","title":"Report Issues &amp; Request Features","text":"<p>Spotted a bug or have an idea for a new feature? Please open an issue on GitHub: NHS-NGS/cgpclient Issues. </p>"},{"location":"contributing/#contribute-code","title":"Contribute Code","text":"<p>Interested in developing a new function or feature? Follow these steps:</p> <ul> <li>Check existing issues to see what's already been requested.  </li> <li>If you\u2019d like to work on something, start a discussion in the #gdam channel on Slack: Join the conversation.  </li> </ul>"},{"location":"set_up/auth/","title":"Authenticate","text":"<p>The CGP client supports multiple authentication methods:</p>"},{"location":"set_up/auth/#api-key-authentication","title":"API Key Authentication","text":"<p>Simple and straightforward, suitable for quick testing and development.</p> 1. Register2. Fetch an OAuth Token 3. Using the OAuth Token4. Config File (Optional)"},{"location":"set_up/auth/#register-an-application-in-the-nhs-developer-hub","title":"Register an application in the NHS Developer Hub","text":"<ol> <li>First, follow the guidelince to register your application</li> <li>Navigate to your application within the appropriate environment (Development or Production) on the NHS Developer Hub.</li> <li>Search for and add the \"Genomic Data &amp; Access Management\" (GDAM) API.</li> </ol> <p>Note</p> <ul> <li> <p>Important: Select the GDAM API that explicitly mentions \"API key authentication.\"</p> </li> <li> <p>Development Applications: API access is typically auto-approved.</p> </li> <li> <p>Production Applications: You'll need to complete the NHS onboarding process.</p> </li> </ul>"},{"location":"set_up/auth/#fetch-an-oauth-token-using-the-get_nhs_oauth_token-script","title":"Fetch an OAuth Token (Using the <code>get_nhs_oauth_token</code> script)","text":"<p>For development, you can use the <code>cgpclient/scripts/get_nhs_oauth_token</code> script to fetch an OAuth token from the NHS APIM using signed JWT authentication. This script simplifies the process described in the NHS documentation.</p> <p>Usage:</p> <pre><code>cgpclient/scripts/get_nhs_oauth_token --help\n</code></pre> <p>Example: <pre><code>PEM_FILE=path/to/test-1.pem\nAPI_KEY=NHSAPIMAPIKEY\ncgpclient/scripts/get_nhs_oauth_token \\\n--api_host internal-dev.api.service.nhs.uk \\\n--api_key $API_KEY \\\n--private_key_pem $PEM_FILE \\\n--apim_kid test-1\n</code></pre></p> <p>Note</p> <p>OAuth tokens expire after 10 minutes. You'll need to refresh them for long-running applications.</p>"},{"location":"set_up/auth/#using-the-oauth-token-with-curl","title":"Using the OAuth Token with curl","text":"<p>You can use the fetched OAuth token in curl commands to interact directly with the API.</p> <p>Example:</p> <pre><code>PEM_FILE=path/to/test-1.pem\nAPI_KEY=NHSAPIMAPIKEY\nOAUTH_TOKEN=$(cgpclient/scripts/get_nhs_oauth_token -pem $PEM_FILE -k $API_KEY -host internal-dev.api.service.nhs.uk -kid test-1)\ncurl \"[https://internal-dev.api.service.nhs.uk/genomic-data-access/FHIR/R4/ServiceRequest?identifier=r30000000001](https://internal-dev.api.service.nhs.uk/genomic-data-access/FHIR/R4/ServiceRequest?identifier=r30000000001)\" -H \"Authorization: Bearer $OAUTH_TOKEN\"\n</code></pre>"},{"location":"set_up/auth/#configuration-file-optional","title":"Configuration File (Optional)","text":"<p>If you use a configuration file at ~/.cgpclient/config.yaml with the necessary arguments, you can simplify the command:</p> <pre><code>OAUTH_TOKEN=$(cgpclient/scripts/get_nhs_oauth_token)\n</code></pre> <p>Choosing Authentication (API Key vs. JWT):</p> <ul> <li>Default: The library defaults to JWT token authentication if both <code>--private_key_pem</code> and <code>--apim_kid</code> are provided.</li> <li>API Key: To use API key authentication, omit <code>--private_key_pem</code> and <code>--apim_kid</code>, and only provide <code>--api_key</code>.</li> </ul>"},{"location":"set_up/auth/#jwt-token-authentication-recommended","title":"JWT Token Authentication (Recommended)","text":"<p>Secure and robust, ideal for production environments. Requires a private key and APIM key ID.</p> 1. Register2. Create Keys3. Use the Private Key and KID4. Verify JWT Authentication"},{"location":"set_up/auth/#register-a-public-key-and-associate-with-your-application","title":"Register a Public Key and Associate with Your Application","text":"<p>To use signed JWT authentication, you'll need:</p> <ul> <li>An application and associated API key (as described in the API key authentication section).</li> <li>A registered public key with NHS APIM, associated with your application in the NHS Developer Hub.</li> <li>The \"Genomic Data &amp; Access Management\" (GDAM) API associated with your application (select the API that mentions \"signed JWT authentication\").</li> </ul> <p>For detailed setup instructions, refer to the official NHS documentation.</p>"},{"location":"set_up/auth/#create-keys-using-the-create_apim_keyssh-script","title":"Create Keys Using the <code>create_apim_keys.sh</code> Script","text":"<p>To simplify the process, we provide the <code>cgpclient/scripts/create_apim_keys.sh</code> bash script, which implements step 2 of the NHS guidance.</p> <p>Usage:</p> <pre><code>bash cgpclient/scripts/create_apim_keys.sh -k \"test-1\" -d ~/apim_keys/\n</code></pre> <ul> <li><code>-k</code>: Specifies the Key Identifier (KID).</li> <li><code>-d</code>: Specifies the directory where the keys will be stored (defaults to the current working directory).</li> </ul> <p>Important Security Note: Keep your private key (<code>&lt;KID&gt;.pem</code>) secure and do not share it.</p>"},{"location":"set_up/auth/#use-the-private-key-and-kid-in-scripts","title":"Use the Private Key and KID in Scripts","text":"<p>The generated private key (.pem) and KID (e.g., \"test-1\") are required when creating signed JWTs using the scripts in this package."},{"location":"set_up/auth/#verify-jwt-authentication-optional","title":"Verify JWT Authentication (Optional)","text":"<p>To confirm your signed JWT authentication setup is working, use the <code>cgpclient/scripts/get_nhs_oauth_token</code> script to retrieve an OAuth token.</p>"},{"location":"set_up/auth/#sandbox-environment","title":"Sandbox Environment","text":"<p>This methodology does not require authentication</p> <ul> <li>For testing and experimentation in the APIM sandbox.</li> <li>Useful for quickly exploring API functionality without setting up authentication.</li> </ul>"},{"location":"set_up/config/","title":"Configuration","text":""},{"location":"set_up/config/#using-a-configuration-file","title":"Using a Configuration File","text":"<p>All command-line arguments for the CGP scripts can also be specified in a YAML configuration file. Use the <code>--config_file</code> or <code>-cfg</code> flag to provide the path to this file.</p> <p>By default, the scripts will look for a configuration file at <code>~/.cgpclient/config.yaml</code>. If this file exists, it will be used automatically\u2014no need to specify it explicitly.</p> <p>Settings in the configuration file should use the same parameter names as the corresponding command-line arguments.</p> <p>Note</p> <p>Command-line arguments always override values specified in the configuration file.</p> <p>All file and directory paths in the configuration file must be absolute paths\u2014relative paths are not supported.</p>"},{"location":"set_up/config/#example-configuration-file-cgpclientconfigyaml","title":"Example Configuration File (<code>~/.cgpclient/config.yaml</code>)","text":"<pre><code>api_host: sandbox.api.service.nhs.uk\napi_name: genomic-data-access\napi_key: NHSAPIMAPIKEY  # API key from the NHS Developer Hub (not required for sandbox)\nprivate_key_pem: /absolute/path/to/test-1.pem # Path to your private key (see: [https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/application-restricted-restful-apis-signed-jwt-authentication#step-2-generate-a-key-pair](https://digital.nhs.uk/developer/guides-and-documentation/security-and-authorisation/application-restricted-restful-apis-signed-jwt-authentication#step-2-generate-a-key-pair)).\napim_kid: test-1  # Key ID (KID) associated with the key pair\noutput_dir: /tmp/output  # Directory for output files\nverbose: true  # Enable verbose logging\npretty_print: true  # Format output for readability\n</code></pre>"},{"location":"set_up/config/#running-a-script-with-configuration","title":"Running a Script with Configuration","text":"<p>With this configuration file, you can run the <code>cgpclient/scripts/list_files</code> script by supplying only the referral ID:</p> <pre><code>cgpclient/scripts/list_files -r r30000000001\n</code></pre>"},{"location":"set_up/register/","title":"Register Your Application","text":"<p>To use the CGP APIs, you must first register your application on the NHS Developer Hub.</p>"},{"location":"set_up/register/#choose-the-appropriate-instance","title":"Choose the Appropriate Instance","text":"<p>Select the correct environment based on your application's stage:</p> <ul> <li> <p>Production (Live) Applications: NHS Developer Hub \u2013 Production</p> </li> <li> <p>Development Applications: NHS Developer Hub \u2013 Development</p> </li> </ul>"},{"location":"set_up/register/#registering-an-application","title":"Registering an Application","text":"<ol> <li>Log in to the appropriate NHS Developer Hub.</li> <li>Navigate to Environment access \u2192 My applications and teams.</li> <li>Click Add new application.</li> </ol>"},{"location":"set_up/register/#configuration-notes","title":"Configuration Notes","text":"<ul> <li>Choose the correct environment: <code>Development</code>, <code>Integration</code>, or <code>Production</code>.</li> <li>This environment will have to match the <code>--api_host</code> parameter in your scripts.</li> </ul>"},{"location":"set_up/set_up/","title":"Set Up","text":"<p>To begin using the CGP client library, you'll need to follow these steps:</p> <p>1 - Register Your Application </p> <p>2 - Authenticate </p> <p>3 - Define your Configuration </p>"},{"location":"training/dwgs_upload/","title":"dWGS Upload Workshop","text":"<p>This course is for users who want to learn how to use the CGPClient library to:</p> <ul> <li>Upload Dragen runs</li> <li>List available files</li> <li>Download datasets</li> </ul>"},{"location":"training/dwgs_upload/#orientation","title":"Orientation","text":""},{"location":"training/dwgs_upload/#environment-setup","title":"Environment Setup","text":"<p>If you have not yet done so, please complete the Environment Setup before proceeding.</p>"},{"location":"training/dwgs_upload/#about-this-workshop","title":"About This Workshop","text":"<p>This workshop provides a hands-on example of uploading files generated by DRAGEN software (version \u22654.0.0) after demultiplexing a complete sequencing run.</p>"},{"location":"training/dwgs_upload/#generate-mock-data","title":"Generate Mock Data","text":"<p>We'll start by creating realistic mock data that mirrors actual DRAGEN output:</p> <pre><code>bash docs/training/generate_mock_run.sh\n</code></pre> <p>What This Creates</p> <p>The script generates a complete run folder structure including:</p> <ul> <li>Run folder: Named with a unique run ID (e.g., <code>250702_A00123_0001_CE956995D6</code>)</li> <li>fastq_list.csv: Metadata file listing all FASTQ files</li> <li>RunInfo.xml: Basic run setup metadata</li> <li>FASTQ files: Sample sequencing data files</li> </ul>"},{"location":"training/dwgs_upload/#expected-directory-structure","title":"Expected Directory Structure","text":"<p>After running the script, you should see a folder structure like this:</p> <pre><code>250702_A00123_0001_CE956995D6/\n\u251c\u2500\u2500 Data/\n\u2502   \u2514\u2500\u2500 Fastq/\n\u2502       \u251c\u2500\u2500 2510585/\n\u2502       \u2502   \u251c\u2500\u2500 2510585_S1_L001_R1_001.fastq.ora\n\u2502       \u2502   \u2514\u2500\u2500 2510585_S1_L001_R2_001.fastq.ora\n\u2502       \u2514\u2500\u2500 2514204/\n\u2502           \u251c\u2500\u2500 2514204_S2_L001_R1_001.fastq.ora\n\u2502           \u2514\u2500\u2500 2514204_S2_L001_R2_001.fastq.ora\n\u251c\u2500\u2500 fastq_list.csv\n\u2514\u2500\u2500 RunInfo.xml\n</code></pre> <p>Checkpoint</p> <p>Before continuing: Verify that your mock data has been generated successfully by running: <pre><code>ls -la 250702_A00123_0001_CE956995D6/\n</code></pre></p>"},{"location":"training/dwgs_upload/#part-1-upload-dragen-run","title":"Part 1: Upload DRAGEN Run","text":""},{"location":"training/dwgs_upload/#configure-the-client","title":"Configure the Client","text":"<p>Create your configuration file:</p> <pre><code>nano config.yaml\n</code></pre> <p>Add the following configuration:</p> <pre><code>verbose: true\noutput_dir: /tmp/output\napi_host: &lt;TBC&gt;\noverride_api_base_url: true\napi_key: &lt;TBC&gt;\nods_code: &lt;add_your_ods_code&gt;\n</code></pre> <p>Action Required</p> <p>Replace <code>&lt;add_your_ods_code&gt;</code> with your actual ODS code before proceeding, e.g. 8J834.</p>"},{"location":"training/dwgs_upload/#explore-the-upload-script","title":"Explore the Upload Script","text":"<p>First, understand what options are available:</p> <pre><code>cgpclient/scripts/upload_dragen_run -h\n</code></pre> <p>Most arguments from the help output correspond to settings in your <code>config.yaml</code> file.</p>"},{"location":"training/dwgs_upload/#prepare-your-upload","title":"Prepare Your Upload","text":"<p>Before running the upload, you'll need unique IDs for this exercise:</p> <ul> <li>Run ID: Use the generated folder name (e.g., <code>250702_A00123_0001_CE956995D6</code>)</li> <li>Patient ID: Create one starting with 'p' (e.g., <code>p5678</code>)</li> <li>Referral ID: Create one starting with 'r' (e.g., <code>r9012</code>)</li> </ul>"},{"location":"training/dwgs_upload/#execute-the-upload","title":"Execute the Upload","text":"<p>Run the upload command with your generated data:</p> <pre><code>cgpclient/scripts/upload_dragen_run \\\n  -f 250702_A00123_0001_CE956995D6/fastq_list.csv \\\n  -rif 250702_A00123_0001_CE956995D6/RunInfo.xml \\\n  -i 250702_A00123_0001_CE956995D6 \\\n  -p p5678 \\\n  -r r9012 \\\n  -cfg config.yaml\n</code></pre> <p>Expected Success Message</p> <p>If successful, you should see: \"Successfully posted FHIR resource\"</p>"},{"location":"training/dwgs_upload/#part-2-list-available-files","title":"Part 2: List Available Files","text":"<p>Now let's verify what files were uploaded successfully.</p>"},{"location":"training/dwgs_upload/#explore-the-list-command","title":"Explore the List Command","text":"<pre><code>cgpclient/scripts/list_files -h\n</code></pre>"},{"location":"training/dwgs_upload/#list-your-uploaded-files","title":"List Your Uploaded Files","text":"<pre><code>cgpclient/scripts/list_files \\\n  -i 250702_A00123_0001_CE956995D6 \\\n  -p p5678 \\\n  -r r9012 \\\n  -cfg config.yaml\n</code></pre>"},{"location":"training/dwgs_upload/#expected-output","title":"Expected Output","text":"<p>You should see output similar to this:</p> <pre><code>name                                   size  content_type     last_updated         author_ods_code    referral_id    participant_id      sample_id  run_id\n-----------------------------------  ------  ---------------  -------------------  -----------------  -------------  ----------------  -----------  -----------------------------\n2514204_S2_L001_R1_001.fastq.ora     355786  text/fastq       2025-07-02T14:58:30  8J834              r9012          p5678                 2514204  250702_A00123_0001_CE956995D6\n2514204_S2_L001_R2_001.fastq.ora     355786  text/fastq       2025-07-02T14:58:30  8J834              r9012          p5678                 2514204  250702_A00123_0001_CE956995D6\nRunInfo.xml                              547  application/xml  2025-07-02T14:58:30  8J834              r9012          p5678                 2514204  250702_A00123_0001_CE956995D6\n</code></pre>"},{"location":"training/dwgs_upload/#part-3-download-files","title":"Part 3: Download Files","text":"<p>Finally, let's download files from the platform.</p>"},{"location":"training/dwgs_upload/#explore-download-options","title":"Explore Download Options","text":"<pre><code>cgpclient/scripts/download_file -h\n</code></pre>"},{"location":"training/dwgs_upload/#download-a-specific-file","title":"Download a Specific File","text":"<p>Choose a file from your list output and download it:</p> <pre><code>cgpclient/scripts/download_file \\\n  -f 2514204_S2_L001_R1_001.fastq.ora \\\n  -cfg config.yaml\n</code></pre> <p>File Location</p> <p>Downloaded files will be saved to the <code>output_dir</code> specified in your <code>config.yaml</code> (default: <code>/tmp/output</code>).</p>"},{"location":"training/dwgs_upload/#verify-the-download","title":"Verify the Download","text":"<p>Check that your file was downloaded successfully:</p> <pre><code>ls -la /tmp/output/\n</code></pre> <p>Interactive Exercise</p> <p>Challenge: Try downloading another file from your list. Can you download the RunInfo.xml file as well?</p>"},{"location":"training/dwgs_upload/#workshop-summary","title":"Workshop Summary","text":"<p>Congratulations! You have completed the dWGS upload workflow:</p> <ul> <li> Configured CGPClient with your credentials and settings</li> <li> Uploaded a complete DRAGEN run with FASTQ files and metadata</li> <li> Listed available files to verify the upload</li> <li> Downloaded files from the platform</li> </ul>"},{"location":"training/htsget-igv-integration/","title":"Visualising Genomic Data with IGV Workshop","text":""},{"location":"training/htsget-igv-integration/#about-this-workshop","title":"About This Workshop","text":"<p>This workshop teaches you how to use the CGPClient library to stream Whole Genome Sequencing (WGS) genomic data files from the Genomics Medicine Service (GMS) through the HTSGET protocol and visualize them with IGV.</p> <p>Learning Objectives</p> <p>By the end of this workshop, you will be able to:</p> <ul> <li>Set up authentication with the NHS API Platform (APIM)</li> <li>Use the CGPClient library to discover and access genomic data files</li> <li>Stream WGS genomic data (BAM, CRAM, VCF) via HTSGET protocol</li> <li>Integrate genomic data with IGV for visualization</li> </ul> <p>Key Technologies</p> <ul> <li>HTSGET: A protocol for fast, indexed access to genomic data over HTTP. Instead of downloading entire files, it streams only specific genomic regions, dramatically reducing bandwidth and improving performance.</li> <li>IGV (Integrative Genomics Viewer): The web-based version of the widely-used Integrative Genomics Viewer, enabling Clinical Scientists to quality check variants, examine read alignments, and make informed clinical decisions directly in the browser.</li> </ul>"},{"location":"training/htsget-igv-integration/#environment-setup","title":"Environment Setup","text":""},{"location":"training/htsget-igv-integration/#1-clone-and-set-up-cgpclient","title":"1. Clone and Set Up CGPClient","text":"<p>Clone the repository and navigate to the project directory:</p> <pre><code>git clone https://github.com/NHS-NGS/cgpclient\ncd cgpclient\n</code></pre> <p>Create and activate a Python environment (using conda):</p> <pre><code># Create and activate environment\nconda create --name=cgpclient python=3.13\nconda activate cgpclient\n</code></pre> <p>Environment Management</p> <p>The environment only needs to be set up once and can be reused across multiple workshop sessions.</p>"},{"location":"training/htsget-igv-integration/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Install Poetry for dependency management:</p> <pre><code>pip install poetry\n</code></pre> <p>Install the client library and dependencies:</p> <pre><code>poetry install\n</code></pre>"},{"location":"training/htsget-igv-integration/#3-verify-installation","title":"3. Verify Installation","text":"<p>Test that everything is installed correctly:</p> <pre><code>python -c \"import cgpclient; print('CGPClient installed successfully')\"\n</code></pre> <p>If you encounter errors, ensure you're in the correct conda environment and that all dependencies were installed properly.</p>"},{"location":"training/htsget-igv-integration/#authentication-setup","title":"Authentication Setup","text":"<p>The NHS API Platform uses JWT (JSON Web Token) authentication with API keys. You'll need to register your application and obtain three key pieces of information: API Key, Private Key PEM, and APIM KID.</p> <p>Authentication Reference</p> <p>For detailed authentication methods and troubleshooting, see the Authentication Guide</p>"},{"location":"training/htsget-igv-integration/#step-1-register-in-the-nhs-api-platform","title":"Step 1: Register in the NHS API Platform","text":"<ol> <li>Navigate to the NHS Developer Hub: https://dos-internal.ptl.api.platform.nhs.uk/</li> <li>Log in with your NHS.net email address or create an account</li> </ol>"},{"location":"training/htsget-igv-integration/#step-2-create-your-application","title":"Step 2: Create Your Application","text":"<ol> <li>Go to Environment access \u2192 My applications and teams</li> <li>Click Add new application</li> <li>Fill in your application details:</li> <li>Environment: Select 'Development' (for this workshop)</li> <li>Owner: Select 'Me'</li> <li>Name: Choose a descriptive name (e.g., \"test-igv-workshop\")</li> <li>Click Create Application</li> </ol>"},{"location":"training/htsget-igv-integration/#step-3-connect-the-gdam-api","title":"Step 3: Connect the GDAM API","text":"<ol> <li>In your application dashboard, find the Connected APIs section</li> <li>Click Add APIs</li> <li>Search for \"GDAM API\" and select the version that explicitly mentions API key authentication</li> <li>Click Add to connect the API to your application</li> </ol> <p>You should now see the linked API in your application dashboard.</p> <p></p>"},{"location":"training/htsget-igv-integration/#step-4-generate-your-api-key-and-private-key","title":"Step 4: Generate Your API Key and Private Key","text":""},{"location":"training/htsget-igv-integration/#get-your-api-key-kid","title":"Get Your API Key (KID)","text":"<ol> <li>In your application dashboard, select Active API keys</li> <li>Copy your Key - this is your KID (Key Identifier)</li> </ol>"},{"location":"training/htsget-igv-integration/#generate-your-private-key","title":"Generate Your Private Key","text":"<p>Use the CGPClient script to generate the required keys:</p> <pre><code>cgpclient/scripts/create_apim_keys.sh -k YOUR_API_KEY -d ~/.cgpclient/test-1.pem\n</code></pre> <p>Replace <code>YOUR_API_KEY</code> with the key you copied from the NHS Developer Hub.</p> <p>Expected output: <pre><code>Output directory '{private_key_pem}' does not exist. Creating it...\nGenerating RSA private key, 4096 bit long modulus (2 primes)\n...\nKey pair and JWKS JSON created successfully for KID: {YOUR_API_KEY} in directory: ~/.cgpclient/\n</code></pre></p>"},{"location":"training/htsget-igv-integration/#step-5-configure-cgpclient","title":"Step 5: Configure CGPClient","text":"<p>Create the configuration directory and file:</p> <pre><code>mkdir -p ~/.cgpclient\nnano ~/.cgpclient/config.yaml\n</code></pre> <p>Add the following configuration (replace the placeholder values):</p> <pre><code>api_host: internal-dev.api.service.nhs.uk \napi_name: genomic-data-access\napi_key: YOUR_API_KEY_HERE  # API key from the NHS Developer Hub\nprivate_key_pem: /absolute/path/to/test-1.pem # Path to your private key\napim_kid: test-1  # Key ID (KID) associated with the key pair\noutput_dir: /tmp/output  # Directory for output files\npretty_print: true  # Format output for readability\n</code></pre>"},{"location":"training/htsget-igv-integration/#discovering-available-genomic-files","title":"Discovering Available Genomic Files","text":""},{"location":"training/htsget-igv-integration/#understanding-the-list-files-command","title":"Understanding the List Files Command","text":"<p>The <code>list_files</code> script queries the Genomic Data Access and Management (GDAM) API to securely obtain file information through the DocumentReference endpoint.</p>"},{"location":"training/htsget-igv-integration/#basic-file-discovery","title":"Basic File Discovery","text":"<p>List all files for a specific referral:</p> <pre><code>cgpclient/scripts/list_files --referral_id r30000000001\n</code></pre> <p>Configuration File</p> <p>This command uses your default configuration file at <code>~/.cgpclient/config.yaml</code>. If you used a different location, specify it with: <code>-cfg CONFIG_FILE</code> or <code>--config_file CONFIG_FILE</code></p>"},{"location":"training/htsget-igv-integration/#filtering-for-specific-files","title":"Filtering for Specific Files","text":"<p>To retrieve specific file types (e.g., CRAM files for a proband), use filtering options:</p> <pre><code>cgpclient/scripts/list_files \\\n--referral_id r30000000001 \\\n--participant_id p12345678301 \\\n--mime_type application/cram \\\n--include_drs_access_urls \\\n--pivot\n</code></pre> <p>Command breakdown:</p> <ul> <li><code>--referral_id</code>: Filters to a specific referral (family/case)</li> <li><code>--participant_id</code>: Filters to a specific participant within the referral</li> <li><code>--mime_type</code>: Filters by file type (application/cram, application/vcf, etc.)</li> <li><code>--include_drs_access_urls</code>: Includes HTSGET URLs for streaming</li> <li><code>--pivot</code>: Formats output for easier reading</li> </ul>"},{"location":"training/htsget-igv-integration/#understanding-the-output","title":"Understanding the Output","text":"<p>The script returns detailed information about each genomic file:</p> <pre><code>file property   value\nlast_updated    2025-07-07T14:03:28\nngis_category   CRAM\ncontent_type    application/cram\nsize            [file_size]\nauthor_ods_code 8J834\nreferral_id     r30000000001\nparticipant_id  p12345678301\nsample_id       LP1000000-DNA_B05\nrun_id          [run_identifier]\nname            LP1000000-DNA_B05.cram\ns3_url          s3://mr459-dev-cgp-objects/2025/07/07/XXXXXX-XXXX-XXXX-XXXXX-XXXXXX/LP1000000-DNA_B05.cram\nhtsget_url      https://sandbox.api.service.nhs.uk/genomic-data-access/ga4gh/htsget/v1.3/reads/XXXXXX-XXXX-XXXX-XXXXX-XXXXXX\n</code></pre> <p>Key fields:</p> <ul> <li><code>name</code>: The original filename</li> <li><code>s3_url</code>: Direct S3 location (for reference)</li> <li><code>htsget_url</code>: The streaming URL we'll use with IGV</li> <li><code>mime_type</code>: File format (CRAM, VCF, etc.)</li> <li><code>size</code>: File size in bytes</li> </ul>"},{"location":"training/htsget-igv-integration/#streaming-data-to-igvjs","title":"Streaming Data to IGV.js","text":"<p>With the HTSGET URL obtained from the file discovery step, you can now stream genomic data directly to IGV.js for visualization.</p> <p>Download the following IGV.js HTML snippet (right click \"save as\")</p> <p>Warning</p> <p>There is a known issue with CORS which means HTSget urls routed via the NHS API platform will not work. </p> <p>We are working with the NHS API platform to find a solution to this</p> <p>Open the HTML in a text editor and modify the tracks</p> <pre><code>    var options = {\n    supportQueryParameters: true,\n    genome: \"hg38\",\n    locus: \"chr7:42395147-42395347\", # specify the region you want to stream here\n    tracks: [\n        {\n        name: 'Reads', # name your track\n        type: 'alignment',\n        format: 'bam',\n        url: 'https://sandbox.api.service.nhs.uk/genomic-data-access/ga4gh/htsget/v1.3/reads/XXXXXX-XXXX-XXXX-XXXXX-XXXXXX', # insert htsget url from the list files output here\n        sourceType: 'htsget',\n        visibilityWindow: 10000,\n    }]\n}\n</code></pre> <p>You can repeat for more CRAMs and other files held in GDAM such as VCFs and BigWigs as per the IGV.js documentation.</p>"},{"location":"training/training/","title":"CGPClient Training","text":"<p>Welcome to the CGPClient training site. Here you\u2019ll find hands-on courses to help you get started with the CGPClient library.</p> <p>We regularly run live workshops, and you can also explore our self-paced training courses below.</p> <p>Stream genomic data for IGV</p> <p>This course is for users who want to learn how to use the CGPClient library to stream genomic data via GDAM API to integrate it with IGV.js.</p> <p> Start with the Training</p> <p>dWGS Upload Training</p> <p>This course is for users who want to learn how to use the CGPClient library to:</p> <ul> <li>Upload Dragen runs</li> <li>List available files</li> <li>Download datasets</li> </ul> <p> Start with the Training</p> <p>Upcoming Workshops</p> <p>Date: There are currently no workshops scheduled.  </p> <p>Next workshops will include:</p> <ul> <li>CGP big picture</li> <li>GDAM + FHIR + IGV Connecathon - See more</li> <li>Using &amp; contributing to the CGP client</li> <li>Beacon Please check back in the coming weeks for more details</li> </ul>"},{"location":"uses/fetching_files/","title":"Fetching Files","text":"<p># Fetch Genomic Files</p> <p>To see usage instructions for the CLI script you can run:</p> <pre><code>cgpclient/scripts/list_files --help\n</code></pre> <p>An example command line to fetch details for referral \"r30000000001\" using API key authentication:</p> <pre><code>API_KEY=NHSAPIMAPIKEY\ncgpclient/scripts/list_files \\\n--referral_id r30000000001 \\\n--api_host sandbox.api.service.nhs.uk \\\n--api_name genomic-data-access \\\n--api_key $API_KEY\n</code></pre> <p>The script prints details of each genomic file found, example output:</p> <pre><code>last_updated         content_type         size  author_ods_code    referral_id    participant_id    sample_id           run_id               name\n2025-07-07T10:52:13  text/fastq              2  ODS123             r12345         p12345            glh_sample_id_1234  glh_run_folder_1234  2506905-D09_L01_R2_001.fastq.ora\n2025-07-07T10:52:13  application/xml         9  ODS123             r12345         p12345            glh_sample_id_1234  glh_run_folder_1234  RunInfo.xml\n2025-07-07T10:52:13  text/fastq              2  ODS123             r12345         p12345            glh_sample_id_1234  glh_run_folder_1234  2506905-D09_L01_R1_001.fastq.ora\n...\n</code></pre> <p>To use signed JWT authentication you can use a command line like below, assuming you have a private key PEM file and a KID as described above:</p> <pre><code>PEM_FILE=path/to/test-1.pem\nAPI_KEY=NHSAPIMAPIKEY\ncgpclient/scripts/list_files \\\n--referral_id r30000000001 \\\n--api_host internal-dev.api.service.nhs.uk \\\n--api_name genomic-data-access \\\n--api_key $API_KEY \\\n--private_key_pem_file $PEM_FILE \\\n--apim_kid test-1\n</code></pre> <p>The output format is the same for both approaches.</p> <p>If you use a configuration file in the default location <code>~/.cgpclient/config.yaml</code> with appropriate arguments set, this command can be simplified to:</p> <pre><code>cgpclient/scripts/list_files -r r30000000001\n</code></pre>"},{"location":"uses/upload_dragen_run/","title":"Upload files from a DRAGEN run","text":"<p>Please note that this script is currently under development.</p> <p>The cgpclient can be used to upload files (e.g. FASTQs) from NHS Sequencing Centres to the CGP.</p> <p>We have included an example script in the scripts directory for uploading FASTQ files generated after demultiplexing with the DRAGEN software.</p> <p>Adapting to each GLH</p> <p>This is an example script and may need to be modified by Sequencing Centres to make it compatible with the data being uploaded.</p> <p>Genomics England will verify, as much as possible, that uploaded files and associated resources are compatible with NGIS, but Sequencing Centres are  responsible for ensuring input files and parameters supplied are correct.</p> <p>If you have any questions please contact Genomics England Service Desk here</p>"},{"location":"uses/upload_dragen_run/#example-data-flow","title":"Example data flow","text":"<p>Uploading FASTQ Files after demultiplexing with DRAGEN using the <code>upload_dragen_run</code> script.</p>"},{"location":"uses/upload_dragen_run/#1-configure-cgp-client","title":"1. Configure CGP Client","text":"<p>You will first need to configure your cgpclient. The following is the basic config required:</p> <pre><code>ods_code: XXXXXXX # your ODS code, this will be used to associate all resources with your organisation\nverbose: true # print verbose output to the console, for even more detail you can use --debug or debug: true\ndry_run: true # use to test the upload without uploading, you can also use the --dry_run command line argument, exclude or set to false to upload the data\noverride_api_base_url: true # needed when testing in non-live environments\napi_host: XXXXXX # will be shared\napi_key: XXXXXXX # will be shared\n</code></pre> <p>For full details on configuration options of the cgpclient, see configuration.</p>"},{"location":"uses/upload_dragen_run/#2-demultiplex-the-sequencing-run","title":"2. Demultiplex the Sequencing Run","text":"<p>Use the DRAGEN software (version: &gt;=<code>4.*.*</code>) to demultiplex the entire sequencing run. This will:</p> <ul> <li>Generate the FASTQ files.</li> <li>Create a file named <code>fastq_list.csv</code>.</li> <li>Create a <code>RunInfo.xml</code> metadata file.</li> <li>All these will be stored in a run folder, and we suggest you use the run folder name as the <code>--run_id</code> to uniquely identify the sequencing run.</li> </ul> <p>Refer to the offical DRAGEN documentation on the \"FASTQ CSV File Format\" for details on the <code>fastq_list.csv</code> file.</p> <p>The following is a basic example:</p> <pre><code>RGID,RGSM,RGLB,Lane,Read1File,Read2File\nGACTGAGTAG.CACTATCAAC.1,my_sample_id,UnknownLibrary,1,my_sample_id_S1_L001_R1_001.fastq.ora,my_sample_id_S1_L001_R2_001.fastq.ora\n</code></pre>"},{"location":"uses/upload_dragen_run/#3-upload-fastq-files","title":"3. Upload FASTQ Files","text":"Info <p>You will need the NGIS referral and participant IDs to run the script to associate the files with the correct referral.</p> <p>It is anticipated the Sequencing Centres will have been sent these when the DNA was sent to them by the GLH ordering the test (this may be the same GLH as the Sequencing Centre)</p> <p>Use the <code>upload_dragen_run</code> script with the following command:</p> <pre><code>cgpclient/scripts/upload_dragen_run \\\n  --run_id {DRAGEN run ID}\n  --run_info_file {path to DRAGEN RunInfo.xml file} (optional)\n  --sample_id {someid} \\\n  --fastq_list {path to fastq list csv file from Dragen} \\ \n  --participant_id {NGIS participant ID} \\\n  --referral_id {NGIS referral ID} \\\n  --config_file {path to cgpclient config file} (if you keep your config in ~/.cgpclient/config.yaml this file will be read by default and you don't need to specify it here)\n</code></pre> <ul> <li>Replace <code>{someid}</code> with the value of <code>RGSM</code> from the <code>fastq_list.csv</code> file for the sample you want to upload. If not supplied this script will use the first RGSM value found</li> <li> <p>Repeat this command for each unique sample (as listed in the RGSM column) that has files to be uploaded.</p> </li> <li> <p>For a DRAGEN run the {DRAGEN run ID} should be the run folder name, e.g. <code>240627_M03456_0001_AHCYL3XY</code>. You can also optionally attach the DRAGEN <code>RunInfo.xml</code> file to the upload using the <code>--run_info_file</code> argument, in which case the file will be uploaded to the CGP and associated with the sample and run like the FASTQs.</p> </li> </ul> <p>The script will go through each row in the <code>fastq_list.csv</code> file and upload only the files for the <code>&lt;someid\\&gt;</code> and ignore all the others.</p>"},{"location":"uses/upload_dragen_run/#4-upload-process-and-resource-creation","title":"4. Upload Process and Resource Creation","text":"<p>Once executed:</p> <ul> <li>All Read 1 and Read 2 files (gz or ora compressed) for the specified sample will be uploaded to the CGP Object Store.</li> <li>Associated HL7 FHIR and GA4GH DRS resources will be created in the Clinical Data Store.</li> <li>For ora compressed files, the appropriate ora reference is determined based on the specified DRAGEN version.</li> </ul> <p>At the time of writing there is a single ora reference for humans associated with DRAGEN &gt;= v4 which we will use by default for handling ora compressed files.</p> <p>See the DRAGEN documentation for more information </p>"},{"location":"uses/upload_dragen_run/#5-upload-results","title":"5. Upload Results","text":"<ul> <li>Large files may take time to upload, log messages will be shown on the terminal. </li> <li>Successful uploads will return confirmation messages.</li> <li>Errors will be reported with relevant details.</li> </ul>"},{"location":"uses/upload_dragen_run/#6-post-upload-association","title":"6. Post-Upload Association","text":"<p>After upload:</p> <ul> <li>FASTQ files will be linked to the corresponding NGIS participant and referral.</li> <li>The NGIS pipeline will proceed once all required data has been verified.</li> </ul>"},{"location":"uses/upload_dragen_run/#7-check-uploaded-files","title":"7. Check uploaded files","text":"<pre><code>./cgpclient/scripts/list_files \\\n  --participant_id {NGIS participant ID} \\\n  --referral_id {NGIS referral ID} \\\n  --config_file {path to cgpclient config file} (if you keep your config in ~/.cgpclient/config.yaml this file will be read by default and you don't need to specify it here)\n</code></pre>"},{"location":"uses/upload_dragen_run/#troubleshooting","title":"Troubleshooting","text":""},{"location":"uses/upload_dragen_run/#how-do-i-check-if-a-file-already-exists-for-my-referral-patient","title":"How do I check if a file already exists for my referral / patient?","text":"<p>TBC</p>"},{"location":"uses/upload_dragen_run/#how-do-i-remove-a-file-uploaded-by-mistake","title":"How do I remove a file uploaded by mistake?","text":"<p>TBC</p>"},{"location":"uses/upload_dragen_run/#how-do-i-re-upload-files-for-a-patient","title":"How do I re-upload files for a patient?","text":"<p>Either:</p>"},{"location":"uses/upload_dragen_run/#from-the-same-sequencing-run-i-have-already-uploaded","title":"From the same sequencing run I have already uploaded","text":"<p>Re-run the <code>upload_dragen_run</code> script using the same parameters as was used initially. The newly uploaded data will... tbc</p>"},{"location":"uses/upload_dragen_run/#from-a-new-sequencing-run","title":"From a new sequencing run","text":"<p>a) using the same DNA sample</p> <p>TBC</p> <p>b) using a new DNA sample</p> <p>TBC</p>"},{"location":"uses/uses/","title":"Uses of the CGP Client Library","text":"<p>The CGP Client library supports several key workflow for interacting with the Clinical Genomics Platform. Below are the primary use cases:</p> <ul> <li> <p>Fetch Genomic Files: Retrieve genomic data files associated with a referral from the CGP. Learn how to fetch files.</p> </li> <li> <p>Upload DRAGEN Runs for dWGS: Upload DRAGEN output files as part of the  dWGS data submission process: Learn how to upload DRAGEN runs.</p> </li> </ul>"}]}